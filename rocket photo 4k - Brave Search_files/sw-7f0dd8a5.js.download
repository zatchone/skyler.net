"use strict";(()=>{var{document:w,cookieStore:g}=self,m=self.location.hostname==="search.brave.com",r=m?()=>{}:console.log.bind(console,"[sw]"),v=console.error.bind(console,"[sw]");w?k():W();function k(){if(navigator.serviceWorker&&navigator.brave){r("registerSW function called");let t=w.currentScript.src;navigator.serviceWorker.register(t,{scope:"/"}).then(e=>{e.installing?r("Service worker installing"):e.waiting?r("Service worker installed"):e.active&&r("Service worker active"),e.addEventListener("updatefound",()=>{r("SW updated.")})}).catch(e=>{r("Service worker registration failed:",e)})}}function y(t){return t.replace("<main ",'<main class="d-invisible" ').replace("<main>",'<main class="d-invisible">')}function R(t,e,s){let n=t.indexOf('id="js-gmix"');return n!==-1?`${t.slice(0,n)} data-sw="${encodeURIComponent(JSON.stringify({body:e,browserApiVersion:s}))}" ${t.slice(n)}`:t}async function I({country:t,language:e,url:s,query:n,safesearch:a}){r("fallback with parameters",{country:t,language:e});try{return[await self.brave.fetchBackupResults(n,e||"",t||"",""),1]}catch(i){if(i.message!=="Insufficient number of arguments.")throw i}try{return[await self.brave.fetchBackupResults(n,e||"",t||"","",a!=="off"),2]}catch(i){if(i.message!=="Insufficient number of arguments.")throw i}try{let i=0,o=s.searchParams.get("offset");if(o)try{i=Number(o)*10}catch(f){}return[await self.brave.fetchBackupResults(n,e||"",t||"","",a!=="off",i),3]}catch(i){if(i.message!=="Insufficient number of arguments.")throw i}}async function x(t,e,s){var i;let n=new URL(e.url);n.searchParams.set("is_fallback_api_available",s?"true":"false");let a=fetch(new Request(n.href,{method:e.method,headers:e.headers,mode:"same-origin",credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity,body:e.body}));try{if(((i=await g.get("fallback"))==null?void 0:i.value)!=="1")return r("user did not opt-in to fallback. Abort!"),a;let{found:o,error:f,country:l,language:u,safesearch:p}=await A(t,n);if(r("can answer query?",t,o,f),f)return r("can answer query error"),a;if(!o){let[d,b]=await I({country:l,language:u,url:n,query:t,safesearch:p});if(d){r("got backup results for",t,d.length);let c=await a;if(c.type!=="basic")return c;let h=await c.text();return h.indexOf('id="js-gmix"')!==-1?new Response(y(R(h,d,b)),{status:c.status,statusText:c.statusText,headers:c.headers}):(r("couldn't find js-gmix bundle"),new Response(h,{status:c.status,statusText:c.statusText,headers:c.headers}))}else r("failed to fetch backup results");return a}return a}catch(o){r("unexpected error",o)}return a}async function S(t,e,s){try{return await x(t,e,s)}catch(n){v("respondWith error",n)}return fetch(e)}function W(){var e;let t=!1;(e=self.brave)!=null&&e.fetchBackupResults?(r("using native browser API"),t=!0):r("no native browser API"),self.addEventListener("install",()=>{r("got install event"),self.skipWaiting()}),self.addEventListener("fetch",async s=>{if(s.clientId)return;if(!t){r("fallback API is not available. Abort!");return}if(!g){r("cookie store is not available. Abort!");return}let n=new URL(s.request.url);if(n.pathname!=="/search"){r("ignoring pathname different from /search",n.pathname);return}let a=n.searchParams.get("q");if(!a){r("ignoring request without a query");return}r("got fetch event",n.searchParams,s),s.respondWith(S(a,s.request,t))})}async function A(t,{searchParams:e}){let s=`/api/can_answer?q=${encodeURIComponent(t)}`;e.has("country")&&(s+=`&country=${encodeURIComponent(e.get("country"))}`),e.has("lang")&&(s+=`&language=${encodeURIComponent(e.get("lang"))}`),e.has("safesearch")&&(s+=`&safesearch=${encodeURIComponent(e.get("safesearch"))}`);let n=Date.now(),a;try{a=await(await fetch(s,{method:"GET",credentials:"include",cache:"no-cache"})).json()}catch(u){return r("error fetching can_answer",u),{error:!0}}let i=Date.now();if(r("Got answer from /can_answer",i-n,a),!("found"in a))return{error:!0};let{language:o,country:f,safesearch:l}=a;return{found:!!a.found,found_fresh:!!a.found_fresh,language:o,country:f==="all"?"us":f,safesearch:l}}})();
